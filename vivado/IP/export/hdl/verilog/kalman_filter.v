// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kalman_filter_kalman_filter,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.423540,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1968,HLS_SYN_LUT=4784,HLS_VERSION=2022_1}" *)

module kalman_filter (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_state48 = 69'd140737488355328;
parameter    ap_ST_fsm_state49 = 69'd281474976710656;
parameter    ap_ST_fsm_state50 = 69'd562949953421312;
parameter    ap_ST_fsm_state51 = 69'd1125899906842624;
parameter    ap_ST_fsm_state52 = 69'd2251799813685248;
parameter    ap_ST_fsm_state53 = 69'd4503599627370496;
parameter    ap_ST_fsm_state54 = 69'd9007199254740992;
parameter    ap_ST_fsm_state55 = 69'd18014398509481984;
parameter    ap_ST_fsm_state56 = 69'd36028797018963968;
parameter    ap_ST_fsm_state57 = 69'd72057594037927936;
parameter    ap_ST_fsm_state58 = 69'd144115188075855872;
parameter    ap_ST_fsm_state59 = 69'd288230376151711744;
parameter    ap_ST_fsm_state60 = 69'd576460752303423488;
parameter    ap_ST_fsm_state61 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 69'd295147905179352825856;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] z_k;
wire   [31:0] P_k;
reg    P_k_ap_vld;
wire   [31:0] x_hat;
reg    x_hat_ap_vld;
wire   [31:0] Q;
wire   [31:0] R;
wire   [31:0] P_k_prev;
wire   [31:0] x_hat_prev;
wire   [5:0] mask_table_address0;
reg    mask_table_ce0;
wire   [51:0] mask_table_q0;
wire   [5:0] mask_table_address1;
reg    mask_table_ce1;
wire   [51:0] mask_table_q1;
wire   [5:0] one_half_table_address0;
reg    one_half_table_ce0;
wire   [52:0] one_half_table_q0;
wire   [5:0] one_half_table_address1;
reg    one_half_table_ce1;
wire   [52:0] one_half_table_q1;
wire   [31:0] grp_fu_233_p1;
reg   [31:0] reg_245;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_236_p1;
reg   [31:0] reg_250;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] reg_255;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] reg_262;
wire   [31:0] grp_fu_208_p2;
reg   [31:0] reg_268;
wire    ap_CS_fsm_state58;
reg   [31:0] reg_276;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state54;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] reg_283;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state62;
reg   [31:0] x_hat_prev_read_reg_814;
wire    ap_CS_fsm_state1;
reg   [31:0] P_k_prev_read_reg_819;
reg   [31:0] R_read_reg_824;
reg   [31:0] Q_read_reg_829;
reg   [31:0] z_k_read_reg_834;
reg   [31:0] conv3_reg_839;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_218_p2;
reg   [31:0] mul3_reg_844;
wire   [63:0] grp_fu_239_p1;
reg   [63:0] dc_reg_849;
wire    ap_CS_fsm_state64;
wire   [63:0] grp_fu_242_p1;
reg   [63:0] dc_2_reg_855;
wire   [63:0] data_V_fu_290_p1;
reg   [63:0] data_V_reg_861;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln1035_fu_303_p2;
reg   [0:0] icmp_ln1035_reg_867;
wire   [0:0] icmp_ln1035_1_fu_309_p2;
reg   [0:0] icmp_ln1035_1_reg_873;
wire   [63:0] data_V_3_fu_331_p1;
reg   [63:0] data_V_3_reg_888;
wire   [0:0] icmp_ln1035_2_fu_344_p2;
reg   [0:0] icmp_ln1035_2_reg_894;
wire   [0:0] icmp_ln1035_3_fu_350_p2;
reg   [0:0] icmp_ln1035_3_reg_900;
reg   [51:0] mask_reg_915;
wire    ap_CS_fsm_state66;
reg   [52:0] one_half_reg_920;
reg   [51:0] mask_1_reg_925;
reg   [52:0] one_half_1_reg_930;
wire   [63:0] dc_1_fu_449_p3;
reg   [63:0] dc_1_reg_935;
wire    ap_CS_fsm_state67;
wire   [63:0] dc_3_fu_533_p3;
reg   [63:0] dc_3_reg_940;
reg   [0:0] p_Result_3_reg_945;
wire    ap_CS_fsm_state68;
wire   [31:0] val_fu_657_p3;
reg   [31:0] val_reg_950;
reg   [0:0] p_Result_8_reg_956;
wire   [31:0] val_1_fu_782_p3;
reg   [31:0] val_1_reg_961;
wire   [63:0] zext_ln541_fu_325_p1;
wire   [63:0] zext_ln541_1_fu_366_p1;
wire    ap_CS_fsm_state69;
reg   [31:0] grp_fu_208_p0;
reg   [31:0] grp_fu_208_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_213_p0;
reg   [31:0] grp_fu_213_p1;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state59;
reg   [31:0] grp_fu_223_p0;
reg   [31:0] grp_fu_223_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_233_p0;
wire    ap_CS_fsm_state2;
reg   [31:0] grp_fu_236_p0;
wire    ap_CS_fsm_state63;
wire   [10:0] xs_exp_V_3_fu_293_p4;
wire   [5:0] index_fu_315_p4;
wire   [10:0] xs_exp_V_4_fu_334_p4;
wire   [5:0] index_1_fu_356_p4;
wire   [0:0] p_Result_s_fu_372_p3;
wire   [63:0] zext_ln204_fu_387_p1;
wire   [63:0] data_V_1_fu_390_p2;
wire   [51:0] trunc_ln628_fu_395_p1;
wire   [51:0] xor_ln1497_fu_399_p2;
wire   [11:0] tmp_fu_410_p4;
wire   [51:0] xs_sig_V_fu_404_p2;
wire   [63:0] p_Result_1_fu_379_p3;
wire   [63:0] p_Result_2_fu_420_p3;
wire   [63:0] select_ln1035_fu_428_p3;
wire   [0:0] xor_ln1035_fu_439_p2;
wire   [0:0] and_ln1035_fu_444_p2;
wire   [63:0] bitcast_ln1035_fu_435_p1;
wire   [0:0] p_Result_5_fu_456_p3;
wire   [63:0] zext_ln204_1_fu_471_p1;
wire   [63:0] data_V_4_fu_474_p2;
wire   [51:0] trunc_ln628_2_fu_479_p1;
wire   [51:0] xor_ln1497_1_fu_483_p2;
wire   [11:0] tmp_8_fu_494_p4;
wire   [51:0] xs_sig_V_1_fu_488_p2;
wire   [63:0] p_Result_6_fu_463_p3;
wire   [63:0] p_Result_7_fu_504_p3;
wire   [63:0] select_ln1035_2_fu_512_p3;
wire   [0:0] xor_ln1035_1_fu_523_p2;
wire   [0:0] and_ln1035_1_fu_528_p2;
wire   [63:0] bitcast_ln1035_1_fu_519_p1;
wire   [63:0] data_V_2_fu_540_p1;
wire   [51:0] p_Result_4_fu_561_p1;
wire   [53:0] mantissa_fu_565_p4;
wire   [10:0] xs_exp_V_fu_551_p4;
wire   [11:0] zext_ln515_fu_579_p1;
wire   [11:0] add_ln515_fu_583_p2;
wire   [10:0] sub_ln1512_fu_597_p2;
wire   [0:0] isNeg_fu_589_p3;
wire  signed [11:0] sext_ln1512_fu_603_p1;
wire   [11:0] ush_fu_607_p3;
wire  signed [31:0] sext_ln1488_fu_615_p1;
wire   [136:0] zext_ln15_fu_575_p1;
wire   [136:0] zext_ln1488_fu_619_p1;
wire   [136:0] r_V_fu_623_p2;
wire   [0:0] tmp_6_fu_635_p3;
wire   [136:0] r_V_1_fu_629_p2;
wire   [31:0] zext_ln818_fu_643_p1;
wire   [31:0] tmp_1_fu_647_p4;
wire   [63:0] data_V_5_fu_665_p1;
wire   [51:0] p_Result_9_fu_686_p1;
wire   [53:0] mantissa_1_fu_690_p4;
wire   [10:0] xs_exp_V_2_fu_676_p4;
wire   [11:0] zext_ln515_1_fu_704_p1;
wire   [11:0] add_ln515_1_fu_708_p2;
wire   [10:0] sub_ln1512_1_fu_722_p2;
wire   [0:0] isNeg_1_fu_714_p3;
wire  signed [11:0] sext_ln1512_1_fu_728_p1;
wire   [11:0] ush_1_fu_732_p3;
wire  signed [31:0] sext_ln1488_1_fu_740_p1;
wire   [136:0] zext_ln15_1_fu_700_p1;
wire   [136:0] zext_ln1488_1_fu_744_p1;
wire   [136:0] r_V_2_fu_748_p2;
wire   [0:0] tmp_12_fu_760_p3;
wire   [136:0] r_V_3_fu_754_p2;
wire   [31:0] zext_ln818_1_fu_768_p1;
wire   [31:0] tmp_4_fu_772_p4;
wire   [31:0] result_V_2_fu_790_p2;
wire   [31:0] result_V_6_fu_802_p2;
reg   [1:0] grp_fu_208_opcode;
reg   [68:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
end

kalman_filter_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0),
    .address1(mask_table_address1),
    .ce1(mask_table_ce1),
    .q1(mask_table_q1)
);

kalman_filter_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0),
    .q0(one_half_table_q0),
    .address1(one_half_table_address1),
    .ce1(one_half_table_ce1),
    .q1(one_half_table_q1)
);

kalman_filter_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .z_k(z_k),
    .P_k(P_k),
    .P_k_ap_vld(P_k_ap_vld),
    .x_hat(x_hat),
    .x_hat_ap_vld(x_hat_ap_vld),
    .Q(Q),
    .R(R),
    .P_k_prev(P_k_prev),
    .x_hat_prev(x_hat_prev)
);

kalman_filter_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_208_p0),
    .din1(grp_fu_208_p1),
    .opcode(grp_fu_208_opcode),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_283),
    .din1(32'd1176256512),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_250),
    .din1(32'd1176256512),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

kalman_filter_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_233_p0),
    .ce(1'b1),
    .dout(grp_fu_233_p1)
);

kalman_filter_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_236_p0),
    .ce(1'b1),
    .dout(grp_fu_236_p1)
);

kalman_filter_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_283),
    .ce(1'b1),
    .dout(grp_fu_239_p1)
);

kalman_filter_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul3_reg_844),
    .ce(1'b1),
    .dout(grp_fu_242_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        P_k_prev_read_reg_819 <= P_k_prev;
        Q_read_reg_829 <= Q;
        R_read_reg_824 <= R;
        x_hat_prev_read_reg_814 <= x_hat_prev;
        z_k_read_reg_834 <= z_k;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv3_reg_839 <= grp_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        data_V_3_reg_888 <= data_V_3_fu_331_p1;
        data_V_reg_861 <= data_V_fu_290_p1;
        icmp_ln1035_1_reg_873 <= icmp_ln1035_1_fu_309_p2;
        icmp_ln1035_2_reg_894 <= icmp_ln1035_2_fu_344_p2;
        icmp_ln1035_3_reg_900 <= icmp_ln1035_3_fu_350_p2;
        icmp_ln1035_reg_867 <= icmp_ln1035_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        dc_1_reg_935 <= dc_1_fu_449_p3;
        dc_3_reg_940 <= dc_3_fu_533_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        dc_2_reg_855 <= grp_fu_242_p1;
        dc_reg_849 <= grp_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        mask_1_reg_925 <= mask_table_q0;
        mask_reg_915 <= mask_table_q1;
        one_half_1_reg_930 <= one_half_table_q0;
        one_half_reg_920 <= one_half_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        mul3_reg_844 <= grp_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        p_Result_3_reg_945 <= data_V_2_fu_540_p1[32'd63];
        p_Result_8_reg_956 <= data_V_5_fu_665_p1[32'd63];
        val_1_reg_961 <= val_1_fu_782_p3;
        val_reg_950 <= val_fu_657_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_245 <= grp_fu_233_p1;
        reg_250 <= grp_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_255 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_262 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_268 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state49))) begin
        reg_276 <= grp_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state58))) begin
        reg_283 <= grp_fu_213_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        P_k_ap_vld = 1'b1;
    end else begin
        P_k_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_fu_208_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_208_opcode = 2'd0;
    end else begin
        grp_fu_208_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_208_p0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_208_p0 = reg_255;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_208_p0 = reg_268;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_208_p0 = reg_262;
    end else begin
        grp_fu_208_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_208_p1 = reg_283;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_208_p1 = reg_262;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_208_p1 = reg_255;
    end else begin
        grp_fu_208_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_213_p0 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_213_p0 = reg_276;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_213_p0 = reg_255;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_213_p1 = 32'd1176256512;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_213_p1 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_213_p1 = reg_276;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_223_p0 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_223_p0 = conv3_reg_839;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_223_p0 = reg_245;
    end else begin
        grp_fu_223_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_223_p1 = reg_276;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_223_p1 = 32'd1176256512;
    end else begin
        grp_fu_223_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_233_p0 = z_k_read_reg_834;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_233_p0 = R_read_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_233_p0 = Q_read_reg_829;
    end else begin
        grp_fu_233_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_236_p0 = x_hat_prev_read_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_236_p0 = P_k_prev_read_reg_819;
    end else begin
        grp_fu_236_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mask_table_ce1 = 1'b1;
    end else begin
        mask_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        one_half_table_ce0 = 1'b1;
    end else begin
        one_half_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        one_half_table_ce1 = 1'b1;
    end else begin
        one_half_table_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        x_hat_ap_vld = 1'b1;
    end else begin
        x_hat_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_k = ((p_Result_8_reg_956[0:0] == 1'b1) ? result_V_6_fu_802_p2 : val_1_reg_961);

assign add_ln515_1_fu_708_p2 = ($signed(zext_ln515_1_fu_704_p1) + $signed(12'd3073));

assign add_ln515_fu_583_p2 = ($signed(zext_ln515_fu_579_p1) + $signed(12'd3073));

assign and_ln1035_1_fu_528_p2 = (xor_ln1035_1_fu_523_p2 & icmp_ln1035_3_reg_900);

assign and_ln1035_fu_444_p2 = (xor_ln1035_fu_439_p2 & icmp_ln1035_1_reg_873);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln1035_1_fu_519_p1 = select_ln1035_2_fu_512_p3;

assign bitcast_ln1035_fu_435_p1 = select_ln1035_fu_428_p3;

assign data_V_1_fu_390_p2 = (zext_ln204_fu_387_p1 + data_V_reg_861);

assign data_V_2_fu_540_p1 = dc_1_reg_935;

assign data_V_3_fu_331_p1 = dc_2_reg_855;

assign data_V_4_fu_474_p2 = (zext_ln204_1_fu_471_p1 + data_V_3_reg_888);

assign data_V_5_fu_665_p1 = dc_3_reg_940;

assign data_V_fu_290_p1 = dc_reg_849;

assign dc_1_fu_449_p3 = ((and_ln1035_fu_444_p2[0:0] == 1'b1) ? dc_reg_849 : bitcast_ln1035_fu_435_p1);

assign dc_3_fu_533_p3 = ((and_ln1035_1_fu_528_p2[0:0] == 1'b1) ? dc_2_reg_855 : bitcast_ln1035_1_fu_519_p1);

assign icmp_ln1035_1_fu_309_p2 = ((xs_exp_V_3_fu_293_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln1035_2_fu_344_p2 = ((xs_exp_V_4_fu_334_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln1035_3_fu_350_p2 = ((xs_exp_V_4_fu_334_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_303_p2 = ((xs_exp_V_3_fu_293_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign index_1_fu_356_p4 = {{data_V_3_fu_331_p1[57:52]}};

assign index_fu_315_p4 = {{data_V_fu_290_p1[57:52]}};

assign isNeg_1_fu_714_p3 = add_ln515_1_fu_708_p2[32'd11];

assign isNeg_fu_589_p3 = add_ln515_fu_583_p2[32'd11];

assign mantissa_1_fu_690_p4 = {{{{1'd1}, {p_Result_9_fu_686_p1}}}, {1'd0}};

assign mantissa_fu_565_p4 = {{{{1'd1}, {p_Result_4_fu_561_p1}}}, {1'd0}};

assign mask_table_address0 = zext_ln541_1_fu_366_p1;

assign mask_table_address1 = zext_ln541_fu_325_p1;

assign one_half_table_address0 = zext_ln541_1_fu_366_p1;

assign one_half_table_address1 = zext_ln541_fu_325_p1;

assign p_Result_1_fu_379_p3 = {{p_Result_s_fu_372_p3}, {63'd0}};

assign p_Result_2_fu_420_p3 = {{tmp_fu_410_p4}, {xs_sig_V_fu_404_p2}};

assign p_Result_4_fu_561_p1 = data_V_2_fu_540_p1[51:0];

assign p_Result_5_fu_456_p3 = data_V_3_reg_888[32'd63];

assign p_Result_6_fu_463_p3 = {{p_Result_5_fu_456_p3}, {63'd0}};

assign p_Result_7_fu_504_p3 = {{tmp_8_fu_494_p4}, {xs_sig_V_1_fu_488_p2}};

assign p_Result_9_fu_686_p1 = data_V_5_fu_665_p1[51:0];

assign p_Result_s_fu_372_p3 = data_V_reg_861[32'd63];

assign r_V_1_fu_629_p2 = zext_ln15_fu_575_p1 << zext_ln1488_fu_619_p1;

assign r_V_2_fu_748_p2 = zext_ln15_1_fu_700_p1 >> zext_ln1488_1_fu_744_p1;

assign r_V_3_fu_754_p2 = zext_ln15_1_fu_700_p1 << zext_ln1488_1_fu_744_p1;

assign r_V_fu_623_p2 = zext_ln15_fu_575_p1 >> zext_ln1488_fu_619_p1;

assign result_V_2_fu_790_p2 = (32'd0 - val_reg_950);

assign result_V_6_fu_802_p2 = (32'd0 - val_1_reg_961);

assign select_ln1035_2_fu_512_p3 = ((icmp_ln1035_2_reg_894[0:0] == 1'b1) ? p_Result_6_fu_463_p3 : p_Result_7_fu_504_p3);

assign select_ln1035_fu_428_p3 = ((icmp_ln1035_reg_867[0:0] == 1'b1) ? p_Result_1_fu_379_p3 : p_Result_2_fu_420_p3);

assign sext_ln1488_1_fu_740_p1 = $signed(ush_1_fu_732_p3);

assign sext_ln1488_fu_615_p1 = $signed(ush_fu_607_p3);

assign sext_ln1512_1_fu_728_p1 = $signed(sub_ln1512_1_fu_722_p2);

assign sext_ln1512_fu_603_p1 = $signed(sub_ln1512_fu_597_p2);

assign sub_ln1512_1_fu_722_p2 = (11'd1023 - xs_exp_V_2_fu_676_p4);

assign sub_ln1512_fu_597_p2 = (11'd1023 - xs_exp_V_fu_551_p4);

assign tmp_12_fu_760_p3 = r_V_2_fu_748_p2[32'd53];

assign tmp_1_fu_647_p4 = {{r_V_1_fu_629_p2[84:53]}};

assign tmp_4_fu_772_p4 = {{r_V_3_fu_754_p2[84:53]}};

assign tmp_6_fu_635_p3 = r_V_fu_623_p2[32'd53];

assign tmp_8_fu_494_p4 = {{data_V_4_fu_474_p2[63:52]}};

assign tmp_fu_410_p4 = {{data_V_1_fu_390_p2[63:52]}};

assign trunc_ln628_2_fu_479_p1 = data_V_4_fu_474_p2[51:0];

assign trunc_ln628_fu_395_p1 = data_V_1_fu_390_p2[51:0];

assign ush_1_fu_732_p3 = ((isNeg_1_fu_714_p3[0:0] == 1'b1) ? sext_ln1512_1_fu_728_p1 : add_ln515_1_fu_708_p2);

assign ush_fu_607_p3 = ((isNeg_fu_589_p3[0:0] == 1'b1) ? sext_ln1512_fu_603_p1 : add_ln515_fu_583_p2);

assign val_1_fu_782_p3 = ((isNeg_1_fu_714_p3[0:0] == 1'b1) ? zext_ln818_1_fu_768_p1 : tmp_4_fu_772_p4);

assign val_fu_657_p3 = ((isNeg_fu_589_p3[0:0] == 1'b1) ? zext_ln818_fu_643_p1 : tmp_1_fu_647_p4);

assign x_hat = ((p_Result_3_reg_945[0:0] == 1'b1) ? result_V_2_fu_790_p2 : val_reg_950);

assign xor_ln1035_1_fu_523_p2 = (icmp_ln1035_2_reg_894 ^ 1'd1);

assign xor_ln1035_fu_439_p2 = (icmp_ln1035_reg_867 ^ 1'd1);

assign xor_ln1497_1_fu_483_p2 = (mask_1_reg_925 ^ 52'd4503599627370495);

assign xor_ln1497_fu_399_p2 = (mask_reg_915 ^ 52'd4503599627370495);

assign xs_exp_V_2_fu_676_p4 = {{data_V_5_fu_665_p1[62:52]}};

assign xs_exp_V_3_fu_293_p4 = {{data_V_fu_290_p1[62:52]}};

assign xs_exp_V_4_fu_334_p4 = {{data_V_3_fu_331_p1[62:52]}};

assign xs_exp_V_fu_551_p4 = {{data_V_2_fu_540_p1[62:52]}};

assign xs_sig_V_1_fu_488_p2 = (xor_ln1497_1_fu_483_p2 & trunc_ln628_2_fu_479_p1);

assign xs_sig_V_fu_404_p2 = (xor_ln1497_fu_399_p2 & trunc_ln628_fu_395_p1);

assign zext_ln1488_1_fu_744_p1 = $unsigned(sext_ln1488_1_fu_740_p1);

assign zext_ln1488_fu_619_p1 = $unsigned(sext_ln1488_fu_615_p1);

assign zext_ln15_1_fu_700_p1 = mantissa_1_fu_690_p4;

assign zext_ln15_fu_575_p1 = mantissa_fu_565_p4;

assign zext_ln204_1_fu_471_p1 = one_half_1_reg_930;

assign zext_ln204_fu_387_p1 = one_half_reg_920;

assign zext_ln515_1_fu_704_p1 = xs_exp_V_2_fu_676_p4;

assign zext_ln515_fu_579_p1 = xs_exp_V_fu_551_p4;

assign zext_ln541_1_fu_366_p1 = index_1_fu_356_p4;

assign zext_ln541_fu_325_p1 = index_fu_315_p4;

assign zext_ln818_1_fu_768_p1 = tmp_12_fu_760_p3;

assign zext_ln818_fu_643_p1 = tmp_6_fu_635_p3;

endmodule //kalman_filter
