-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of kalman_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kalman_filter_kalman_filter,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.423540,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1968,HLS_SYN_LUT=4784,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_461C4000 : STD_LOGIC_VECTOR (31 downto 0) := "01000110000111000100000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal z_k : STD_LOGIC_VECTOR (31 downto 0);
    signal P_k : STD_LOGIC_VECTOR (31 downto 0);
    signal P_k_ap_vld : STD_LOGIC;
    signal x_hat : STD_LOGIC_VECTOR (31 downto 0);
    signal x_hat_ap_vld : STD_LOGIC;
    signal Q : STD_LOGIC_VECTOR (31 downto 0);
    signal R : STD_LOGIC_VECTOR (31 downto 0);
    signal P_k_prev : STD_LOGIC_VECTOR (31 downto 0);
    signal x_hat_prev : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal mask_table_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce1 : STD_LOGIC;
    signal mask_table_q1 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table_ce0 : STD_LOGIC;
    signal one_half_table_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal one_half_table_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table_ce1 : STD_LOGIC;
    signal one_half_table_q1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal x_hat_prev_read_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal P_k_prev_read_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_read_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal Q_read_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_k_read_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_849 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_2_reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_861 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal icmp_ln1035_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_3_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_3_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1035_2_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_2_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_3_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_3_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_reg_915 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal one_half_reg_920 : STD_LOGIC_VECTOR (52 downto 0);
    signal mask_1_reg_925 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_1_reg_930 : STD_LOGIC_VECTOR (52 downto 0);
    signal dc_1_fu_449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal dc_3_fu_533_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_3_reg_940 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_reg_945 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal val_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_1_fu_782_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln541_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_1_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal xs_exp_V_3_fu_293_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_fu_315_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal xs_exp_V_4_fu_334_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_1_fu_356_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln204_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln628_fu_395_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1497_fu_399_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_410_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_404_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_379_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1035_fu_428_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1035_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1035_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln204_1_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_4_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln628_2_fu_479_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xor_ln1497_1_fu_483_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_8_fu_494_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_1_fu_488_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_6_fu_463_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_7_fu_504_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1035_2_fu_512_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1035_1_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1035_1_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln1035_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_2_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_561_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_565_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_fu_551_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_579_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_583_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_597_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_603_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_607_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_575_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_fu_619_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_623_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_6_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_629_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_647_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_5_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_9_fu_686_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_690_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_2_fu_676_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_1_fu_704_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_1_fu_708_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_1_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_1_fu_728_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_732_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_1_fu_740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_700_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_1_fu_744_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_748_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_12_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_754_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_1_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_772_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_6_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kalman_filter_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component kalman_filter_one_half_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;


    component kalman_filter_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        z_k : OUT STD_LOGIC_VECTOR (31 downto 0);
        P_k : IN STD_LOGIC_VECTOR (31 downto 0);
        P_k_ap_vld : IN STD_LOGIC;
        x_hat : IN STD_LOGIC_VECTOR (31 downto 0);
        x_hat_ap_vld : IN STD_LOGIC;
        Q : OUT STD_LOGIC_VECTOR (31 downto 0);
        R : OUT STD_LOGIC_VECTOR (31 downto 0);
        P_k_prev : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_hat_prev : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mask_table_U : component kalman_filter_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0,
        address1 => mask_table_address1,
        ce1 => mask_table_ce1,
        q1 => mask_table_q1);

    one_half_table_U : component kalman_filter_one_half_table_ROM_AUTO_1R
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => one_half_table_address0,
        ce0 => one_half_table_ce0,
        q0 => one_half_table_q0,
        address1 => one_half_table_address1,
        ce1 => one_half_table_ce1,
        q1 => one_half_table_q1);

    control_s_axi_U : component kalman_filter_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        z_k => z_k,
        P_k => P_k,
        P_k_ap_vld => P_k_ap_vld,
        x_hat => x_hat,
        x_hat_ap_vld => x_hat_ap_vld,
        Q => Q,
        R => R,
        P_k_prev => P_k_prev,
        x_hat_prev => x_hat_prev);

    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component kalman_filter_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        opcode => grp_fu_208_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_283,
        din1 => ap_const_lv32_461C4000,
        ce => ap_const_logic_1,
        dout => grp_fu_218_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U4 : component kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U5 : component kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_250,
        din1 => ap_const_lv32_461C4000,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p2);

    sitofp_32ns_32_6_no_dsp_1_U6 : component kalman_filter_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_233_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p1);

    sitofp_32ns_32_6_no_dsp_1_U7 : component kalman_filter_sitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_236_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p1);

    fpext_32ns_64_2_no_dsp_1_U8 : component kalman_filter_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_283,
        ce => ap_const_logic_1,
        dout => grp_fu_239_p1);

    fpext_32ns_64_2_no_dsp_1_U9 : component kalman_filter_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul3_reg_844,
        ce => ap_const_logic_1,
        dout => grp_fu_242_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                P_k_prev_read_reg_819 <= P_k_prev;
                Q_read_reg_829 <= Q;
                R_read_reg_824 <= R;
                x_hat_prev_read_reg_814 <= x_hat_prev;
                z_k_read_reg_834 <= z_k;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                conv3_reg_839 <= grp_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                data_V_3_reg_888 <= data_V_3_fu_331_p1;
                data_V_reg_861 <= data_V_fu_290_p1;
                icmp_ln1035_1_reg_873 <= icmp_ln1035_1_fu_309_p2;
                icmp_ln1035_2_reg_894 <= icmp_ln1035_2_fu_344_p2;
                icmp_ln1035_3_reg_900 <= icmp_ln1035_3_fu_350_p2;
                icmp_ln1035_reg_867 <= icmp_ln1035_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                dc_1_reg_935 <= dc_1_fu_449_p3;
                dc_3_reg_940 <= dc_3_fu_533_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                dc_2_reg_855 <= grp_fu_242_p1;
                dc_reg_849 <= grp_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                mask_1_reg_925 <= mask_table_q0;
                mask_reg_915 <= mask_table_q1;
                one_half_1_reg_930 <= one_half_table_q0;
                one_half_reg_920 <= one_half_table_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                mul3_reg_844 <= grp_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                p_Result_3_reg_945 <= data_V_2_fu_540_p1(63 downto 63);
                p_Result_8_reg_956 <= data_V_5_fu_665_p1(63 downto 63);
                val_1_reg_961 <= val_1_fu_782_p3;
                val_reg_950 <= val_fu_657_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_245 <= grp_fu_233_p1;
                reg_250 <= grp_fu_236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_255 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_262 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_268 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_276 <= grp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state58))) then
                reg_283 <= grp_fu_213_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    P_k <= 
        result_V_6_fu_802_p2 when (p_Result_8_reg_956(0) = '1') else 
        val_1_reg_961;

    P_k_ap_vld_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            P_k_ap_vld <= ap_const_logic_1;
        else 
            P_k_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln515_1_fu_708_p2 <= std_logic_vector(unsigned(zext_ln515_1_fu_704_p1) + unsigned(ap_const_lv12_C01));
    add_ln515_fu_583_p2 <= std_logic_vector(unsigned(zext_ln515_fu_579_p1) + unsigned(ap_const_lv12_C01));
    and_ln1035_1_fu_528_p2 <= (xor_ln1035_1_fu_523_p2 and icmp_ln1035_3_reg_900);
    and_ln1035_fu_444_p2 <= (xor_ln1035_fu_439_p2 and icmp_ln1035_1_reg_873);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln1035_1_fu_519_p1 <= select_ln1035_2_fu_512_p3;
    bitcast_ln1035_fu_435_p1 <= select_ln1035_fu_428_p3;
    data_V_1_fu_390_p2 <= std_logic_vector(unsigned(zext_ln204_fu_387_p1) + unsigned(data_V_reg_861));
    data_V_2_fu_540_p1 <= dc_1_reg_935;
    data_V_3_fu_331_p1 <= dc_2_reg_855;
    data_V_4_fu_474_p2 <= std_logic_vector(unsigned(zext_ln204_1_fu_471_p1) + unsigned(data_V_3_reg_888));
    data_V_5_fu_665_p1 <= dc_3_reg_940;
    data_V_fu_290_p1 <= dc_reg_849;
    dc_1_fu_449_p3 <= 
        dc_reg_849 when (and_ln1035_fu_444_p2(0) = '1') else 
        bitcast_ln1035_fu_435_p1;
    dc_3_fu_533_p3 <= 
        dc_2_reg_855 when (and_ln1035_1_fu_528_p2(0) = '1') else 
        bitcast_ln1035_1_fu_519_p1;

    grp_fu_208_opcode_assign_proc : process(ap_CS_fsm_state54, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state45, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_208_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            grp_fu_208_opcode <= ap_const_lv2_0;
        else 
            grp_fu_208_opcode <= "XX";
        end if; 
    end process;


    grp_fu_208_p0_assign_proc : process(reg_255, reg_262, reg_268, ap_CS_fsm_state54, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state45, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_208_p0 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_208_p0 <= reg_255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_208_p0 <= reg_268;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            grp_fu_208_p0 <= reg_262;
        else 
            grp_fu_208_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_208_p1_assign_proc : process(reg_255, reg_262, ap_CS_fsm_state54, reg_283, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state45, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_208_p1 <= reg_283;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_208_p1 <= reg_262;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_208_p1 <= reg_255;
        else 
            grp_fu_208_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p0_assign_proc : process(reg_255, reg_268, reg_276, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_213_p0 <= reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_213_p0 <= reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_213_p0 <= reg_255;
        else 
            grp_fu_213_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_213_p1_assign_proc : process(reg_268, reg_276, ap_CS_fsm_state50, ap_CS_fsm_state55, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_213_p1 <= ap_const_lv32_461C4000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_213_p1 <= reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_213_p1 <= reg_276;
        else 
            grp_fu_213_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p0_assign_proc : process(reg_245, reg_268, conv3_reg_839, ap_CS_fsm_state29, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_223_p0 <= reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_223_p0 <= conv3_reg_839;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_223_p0 <= reg_245;
        else 
            grp_fu_223_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(reg_276, ap_CS_fsm_state29, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_223_p1 <= reg_276;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_fu_223_p1 <= ap_const_lv32_461C4000;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, R_read_reg_824, Q_read_reg_829, z_k_read_reg_834, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_233_p0 <= z_k_read_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_233_p0 <= R_read_reg_824;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_233_p0 <= Q_read_reg_829;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p0_assign_proc : process(ap_CS_fsm_state23, x_hat_prev_read_reg_814, P_k_prev_read_reg_819, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_236_p0 <= x_hat_prev_read_reg_814;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_236_p0 <= P_k_prev_read_reg_819;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1035_1_fu_309_p2 <= "1" when (unsigned(xs_exp_V_3_fu_293_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln1035_2_fu_344_p2 <= "1" when (unsigned(xs_exp_V_4_fu_334_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    icmp_ln1035_3_fu_350_p2 <= "1" when (unsigned(xs_exp_V_4_fu_334_p4) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln1035_fu_303_p2 <= "1" when (unsigned(xs_exp_V_3_fu_293_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    index_1_fu_356_p4 <= data_V_3_fu_331_p1(57 downto 52);
    index_fu_315_p4 <= data_V_fu_290_p1(57 downto 52);
    isNeg_1_fu_714_p3 <= add_ln515_1_fu_708_p2(11 downto 11);
    isNeg_fu_589_p3 <= add_ln515_fu_583_p2(11 downto 11);
    mantissa_1_fu_690_p4 <= ((ap_const_lv1_1 & p_Result_9_fu_686_p1) & ap_const_lv1_0);
    mantissa_fu_565_p4 <= ((ap_const_lv1_1 & p_Result_4_fu_561_p1) & ap_const_lv1_0);
    mask_table_address0 <= zext_ln541_1_fu_366_p1(6 - 1 downto 0);
    mask_table_address1 <= zext_ln541_fu_325_p1(6 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mask_table_ce1_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            mask_table_ce1 <= ap_const_logic_1;
        else 
            mask_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_table_address0 <= zext_ln541_1_fu_366_p1(6 - 1 downto 0);
    one_half_table_address1 <= zext_ln541_fu_325_p1(6 - 1 downto 0);

    one_half_table_ce0_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            one_half_table_ce0 <= ap_const_logic_1;
        else 
            one_half_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    one_half_table_ce1_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            one_half_table_ce1 <= ap_const_logic_1;
        else 
            one_half_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_379_p3 <= (p_Result_s_fu_372_p3 & ap_const_lv63_0);
    p_Result_2_fu_420_p3 <= (tmp_fu_410_p4 & xs_sig_V_fu_404_p2);
    p_Result_4_fu_561_p1 <= data_V_2_fu_540_p1(52 - 1 downto 0);
    p_Result_5_fu_456_p3 <= data_V_3_reg_888(63 downto 63);
    p_Result_6_fu_463_p3 <= (p_Result_5_fu_456_p3 & ap_const_lv63_0);
    p_Result_7_fu_504_p3 <= (tmp_8_fu_494_p4 & xs_sig_V_1_fu_488_p2);
    p_Result_9_fu_686_p1 <= data_V_5_fu_665_p1(52 - 1 downto 0);
    p_Result_s_fu_372_p3 <= data_V_reg_861(63 downto 63);
    r_V_1_fu_629_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_575_p1),to_integer(unsigned('0' & zext_ln1488_fu_619_p1(31-1 downto 0)))));
    r_V_2_fu_748_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_700_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_744_p1(31-1 downto 0)))));
    r_V_3_fu_754_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_700_p1),to_integer(unsigned('0' & zext_ln1488_1_fu_744_p1(31-1 downto 0)))));
    r_V_fu_623_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_575_p1),to_integer(unsigned('0' & zext_ln1488_fu_619_p1(31-1 downto 0)))));
    result_V_2_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_950));
    result_V_6_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_reg_961));
    select_ln1035_2_fu_512_p3 <= 
        p_Result_6_fu_463_p3 when (icmp_ln1035_2_reg_894(0) = '1') else 
        p_Result_7_fu_504_p3;
    select_ln1035_fu_428_p3 <= 
        p_Result_1_fu_379_p3 when (icmp_ln1035_reg_867(0) = '1') else 
        p_Result_2_fu_420_p3;
        sext_ln1488_1_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_732_p3),32));

        sext_ln1488_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_607_p3),32));

        sext_ln1512_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_1_fu_722_p2),12));

        sext_ln1512_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_597_p2),12));

    sub_ln1512_1_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_2_fu_676_p4));
    sub_ln1512_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_fu_551_p4));
    tmp_12_fu_760_p3 <= r_V_2_fu_748_p2(53 downto 53);
    tmp_1_fu_647_p4 <= r_V_1_fu_629_p2(84 downto 53);
    tmp_4_fu_772_p4 <= r_V_3_fu_754_p2(84 downto 53);
    tmp_6_fu_635_p3 <= r_V_fu_623_p2(53 downto 53);
    tmp_8_fu_494_p4 <= data_V_4_fu_474_p2(63 downto 52);
    tmp_fu_410_p4 <= data_V_1_fu_390_p2(63 downto 52);
    trunc_ln628_2_fu_479_p1 <= data_V_4_fu_474_p2(52 - 1 downto 0);
    trunc_ln628_fu_395_p1 <= data_V_1_fu_390_p2(52 - 1 downto 0);
    ush_1_fu_732_p3 <= 
        sext_ln1512_1_fu_728_p1 when (isNeg_1_fu_714_p3(0) = '1') else 
        add_ln515_1_fu_708_p2;
    ush_fu_607_p3 <= 
        sext_ln1512_fu_603_p1 when (isNeg_fu_589_p3(0) = '1') else 
        add_ln515_fu_583_p2;
    val_1_fu_782_p3 <= 
        zext_ln818_1_fu_768_p1 when (isNeg_1_fu_714_p3(0) = '1') else 
        tmp_4_fu_772_p4;
    val_fu_657_p3 <= 
        zext_ln818_fu_643_p1 when (isNeg_fu_589_p3(0) = '1') else 
        tmp_1_fu_647_p4;
    x_hat <= 
        result_V_2_fu_790_p2 when (p_Result_3_reg_945(0) = '1') else 
        val_reg_950;

    x_hat_ap_vld_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            x_hat_ap_vld <= ap_const_logic_1;
        else 
            x_hat_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1035_1_fu_523_p2 <= (icmp_ln1035_2_reg_894 xor ap_const_lv1_1);
    xor_ln1035_fu_439_p2 <= (icmp_ln1035_reg_867 xor ap_const_lv1_1);
    xor_ln1497_1_fu_483_p2 <= (mask_1_reg_925 xor ap_const_lv52_FFFFFFFFFFFFF);
    xor_ln1497_fu_399_p2 <= (mask_reg_915 xor ap_const_lv52_FFFFFFFFFFFFF);
    xs_exp_V_2_fu_676_p4 <= data_V_5_fu_665_p1(62 downto 52);
    xs_exp_V_3_fu_293_p4 <= data_V_fu_290_p1(62 downto 52);
    xs_exp_V_4_fu_334_p4 <= data_V_3_fu_331_p1(62 downto 52);
    xs_exp_V_fu_551_p4 <= data_V_2_fu_540_p1(62 downto 52);
    xs_sig_V_1_fu_488_p2 <= (xor_ln1497_1_fu_483_p2 and trunc_ln628_2_fu_479_p1);
    xs_sig_V_fu_404_p2 <= (xor_ln1497_fu_399_p2 and trunc_ln628_fu_395_p1);
    zext_ln1488_1_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_1_fu_740_p1),137));
    zext_ln1488_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_615_p1),137));
    zext_ln15_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_690_p4),137));
    zext_ln15_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_565_p4),137));
    zext_ln204_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_1_reg_930),64));
    zext_ln204_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(one_half_reg_920),64));
    zext_ln515_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_2_fu_676_p4),12));
    zext_ln515_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_551_p4),12));
    zext_ln541_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_fu_356_p4),64));
    zext_ln541_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_315_p4),64));
    zext_ln818_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_760_p3),32));
    zext_ln818_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_635_p3),32));
end behav;
