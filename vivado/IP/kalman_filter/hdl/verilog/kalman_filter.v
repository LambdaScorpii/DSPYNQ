// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kalman_filter_kalman_filter,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.423540,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2036,HLS_SYN_LUT=4550,HLS_VERSION=2024_1}" *)

module kalman_filter (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_state48 = 69'd140737488355328;
parameter    ap_ST_fsm_state49 = 69'd281474976710656;
parameter    ap_ST_fsm_state50 = 69'd562949953421312;
parameter    ap_ST_fsm_state51 = 69'd1125899906842624;
parameter    ap_ST_fsm_state52 = 69'd2251799813685248;
parameter    ap_ST_fsm_state53 = 69'd4503599627370496;
parameter    ap_ST_fsm_state54 = 69'd9007199254740992;
parameter    ap_ST_fsm_state55 = 69'd18014398509481984;
parameter    ap_ST_fsm_state56 = 69'd36028797018963968;
parameter    ap_ST_fsm_state57 = 69'd72057594037927936;
parameter    ap_ST_fsm_state58 = 69'd144115188075855872;
parameter    ap_ST_fsm_state59 = 69'd288230376151711744;
parameter    ap_ST_fsm_state60 = 69'd576460752303423488;
parameter    ap_ST_fsm_state61 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 69'd295147905179352825856;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] z_k;
wire   [31:0] P_k;
reg    P_k_ap_vld;
wire   [31:0] x_hat;
reg    x_hat_ap_vld;
wire   [31:0] Q;
wire   [31:0] R;
wire   [31:0] P_k_prev;
wire   [31:0] x_hat_prev;
wire   [5:0] mask_table_address0;
wire   [51:0] mask_table_q0;
wire   [5:0] mask_table_address1;
wire   [51:0] mask_table_q1;
wire   [5:0] one_half_table_address0;
wire   [52:0] one_half_table_q0;
wire   [5:0] one_half_table_address1;
wire   [52:0] one_half_table_q1;
wire   [31:0] grp_fu_245_p1;
reg   [31:0] reg_257;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_248_p1;
reg   [31:0] reg_262;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] reg_267;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire   [31:0] grp_fu_240_p2;
reg   [31:0] reg_274;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] reg_280;
wire    ap_CS_fsm_state58;
reg   [31:0] reg_288;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state54;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] reg_295;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state62;
reg   [31:0] x_hat_prev_read_reg_852;
wire    ap_CS_fsm_state1;
reg   [31:0] P_k_prev_read_reg_857;
reg   [31:0] R_read_reg_862;
reg   [31:0] Q_read_reg_867;
reg   [31:0] z_k_read_reg_872;
reg   [31:0] conv3_reg_877;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] mul3_reg_882;
wire   [63:0] grp_fu_251_p1;
reg   [63:0] dc_reg_887;
wire    ap_CS_fsm_state64;
wire   [63:0] grp_fu_254_p1;
reg   [63:0] dc_3_reg_893;
wire   [63:0] data_4_fu_302_p1;
reg   [63:0] data_4_reg_899;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln167_fu_315_p2;
reg   [0:0] icmp_ln167_reg_904;
reg   [0:0] tmp_reg_910;
wire   [0:0] icmp_ln170_fu_329_p2;
reg   [0:0] icmp_ln170_reg_915;
wire   [63:0] data_5_fu_351_p1;
reg   [63:0] data_5_reg_930;
wire   [0:0] icmp_ln167_1_fu_364_p2;
reg   [0:0] icmp_ln167_1_reg_935;
reg   [0:0] tmp_7_reg_941;
wire   [0:0] icmp_ln170_1_fu_378_p2;
reg   [0:0] icmp_ln170_1_reg_946;
reg   [51:0] mask_reg_961;
wire    ap_CS_fsm_state66;
reg   [52:0] one_half_reg_966;
reg   [51:0] mask_1_reg_971;
reg   [52:0] one_half_1_reg_976;
wire   [63:0] dc_1_fu_473_p9;
reg   [63:0] dc_1_reg_981;
wire    ap_CS_fsm_state67;
wire   [63:0] dc_4_fu_565_p9;
reg   [63:0] dc_4_reg_986;
reg   [0:0] xs_sign_reg_991;
wire    ap_CS_fsm_state68;
wire   [0:0] tmp_6_fu_633_p3;
reg   [0:0] tmp_6_reg_996;
reg   [31:0] tmp_1_reg_1001;
reg   [31:0] tmp_2_reg_1006;
reg   [0:0] xs_sign_1_reg_1011;
wire   [0:0] tmp_9_fu_748_p3;
reg   [0:0] tmp_9_reg_1016;
reg   [31:0] tmp_3_reg_1021;
reg   [31:0] tmp_4_reg_1026;
wire   [63:0] zext_ln179_fu_345_p1;
wire   [63:0] zext_ln179_1_fu_394_p1;
wire    ap_CS_fsm_state69;
reg    mask_table_ce1_local;
reg    mask_table_ce0_local;
reg    one_half_table_ce1_local;
reg    one_half_table_ce0_local;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
reg   [31:0] grp_fu_225_p0;
reg   [31:0] grp_fu_225_p1;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state59;
reg   [31:0] grp_fu_235_p0;
reg   [31:0] grp_fu_235_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_245_p0;
wire    ap_CS_fsm_state2;
reg   [31:0] grp_fu_248_p0;
wire    ap_CS_fsm_state63;
wire   [10:0] xs_exp_fu_305_p4;
wire   [5:0] index_fu_335_p4;
wire   [10:0] xs_exp_2_fu_354_p4;
wire   [5:0] index_1_fu_384_p4;
wire   [63:0] t_fu_400_p3;
wire   [63:0] zext_ln175_fu_411_p1;
wire   [63:0] add_ln182_fu_414_p2;
wire   [51:0] trunc_ln467_fu_419_p1;
wire   [51:0] xor_ln184_fu_423_p2;
wire   [11:0] tmp_1_i_fu_434_p4;
wire   [51:0] xs_sig_fu_428_p2;
wire   [63:0] t_5_fu_444_p3;
wire   [0:0] xor_ln167_fu_456_p2;
wire   [0:0] and_ln170_fu_461_p2;
wire   [63:0] dc_1_fu_473_p2;
wire   [63:0] dc_1_fu_473_p6;
wire   [63:0] dc_1_fu_473_p7;
wire   [1:0] dc_1_fu_473_p8;
wire   [63:0] t_6_fu_492_p3;
wire   [63:0] zext_ln175_1_fu_503_p1;
wire   [63:0] add_ln182_1_fu_506_p2;
wire   [51:0] trunc_ln467_1_fu_511_p1;
wire   [51:0] xor_ln184_1_fu_515_p2;
wire   [11:0] tmp_1_i1_fu_526_p4;
wire   [51:0] xs_sig_1_fu_520_p2;
wire   [63:0] t_7_fu_536_p3;
wire   [0:0] xor_ln167_1_fu_548_p2;
wire   [0:0] and_ln170_1_fu_553_p2;
wire   [63:0] dc_4_fu_565_p2;
wire   [63:0] dc_4_fu_565_p6;
wire   [63:0] dc_4_fu_565_p7;
wire   [1:0] dc_4_fu_565_p8;
wire   [63:0] data_fu_584_p1;
wire   [51:0] trunc_ln505_fu_605_p1;
wire   [53:0] mantissa_fu_609_p4;
wire   [10:0] xs_exp_1_fu_595_p4;
wire   [11:0] zext_ln486_fu_623_p1;
wire   [11:0] add_ln486_fu_627_p2;
wire   [10:0] sub_ln18_fu_641_p2;
wire  signed [11:0] sext_ln18_fu_647_p1;
wire   [11:0] select_ln18_fu_651_p3;
wire  signed [31:0] sext_ln18_1_fu_659_p1;
wire   [136:0] zext_ln15_fu_619_p1;
wire   [136:0] zext_ln18_fu_663_p1;
wire   [136:0] lshr_ln18_fu_667_p2;
wire   [136:0] shl_ln18_fu_673_p2;
wire   [63:0] data_3_fu_699_p1;
wire   [51:0] trunc_ln505_1_fu_720_p1;
wire   [53:0] mantissa_1_fu_724_p4;
wire   [10:0] xs_exp_3_fu_710_p4;
wire   [11:0] zext_ln486_1_fu_738_p1;
wire   [11:0] add_ln486_1_fu_742_p2;
wire   [10:0] sub_ln18_1_fu_756_p2;
wire  signed [11:0] sext_ln18_2_fu_762_p1;
wire   [11:0] select_ln18_2_fu_766_p3;
wire  signed [31:0] sext_ln18_3_fu_774_p1;
wire   [136:0] zext_ln15_1_fu_734_p1;
wire   [136:0] zext_ln18_1_fu_778_p1;
wire   [136:0] lshr_ln18_1_fu_782_p2;
wire   [136:0] shl_ln18_1_fu_788_p2;
wire   [31:0] val_fu_814_p3;
wire   [31:0] result_1_fu_819_p2;
wire   [31:0] val_1_fu_833_p3;
wire   [31:0] result_4_fu_838_p2;
reg   [1:0] grp_fu_220_opcode;
reg   [68:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire  signed [1:0] dc_1_fu_473_p1;
wire   [1:0] dc_1_fu_473_p3;
wire   [1:0] dc_1_fu_473_p5;
wire  signed [1:0] dc_4_fu_565_p1;
wire   [1:0] dc_4_fu_565_p3;
wire   [1:0] dc_4_fu_565_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
end

kalman_filter_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0_local),
    .q0(mask_table_q0),
    .address1(mask_table_address1),
    .ce1(mask_table_ce1_local),
    .q1(mask_table_q1)
);

kalman_filter_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0_local),
    .q0(one_half_table_q0),
    .address1(one_half_table_address1),
    .ce1(one_half_table_ce1_local),
    .q1(one_half_table_q1)
);

kalman_filter_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .z_k(z_k),
    .P_k(P_k),
    .P_k_ap_vld(P_k_ap_vld),
    .x_hat(x_hat),
    .x_hat_ap_vld(x_hat_ap_vld),
    .Q(Q),
    .R(R),
    .P_k_prev(P_k_prev),
    .x_hat_prev(x_hat_prev)
);

kalman_filter_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .opcode(grp_fu_220_opcode),
    .ce(1'b1),
    .dout(grp_fu_220_p2)
);

kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_225_p0),
    .din1(grp_fu_225_p1),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

kalman_filter_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_295),
    .din1(32'd1176256512),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

kalman_filter_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_262),
    .din1(32'd1176256512),
    .ce(1'b1),
    .dout(grp_fu_240_p2)
);

kalman_filter_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_245_p0),
    .ce(1'b1),
    .dout(grp_fu_245_p1)
);

kalman_filter_sitofp_32ns_32_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_6_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_248_p0),
    .ce(1'b1),
    .dout(grp_fu_248_p1)
);

kalman_filter_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_295),
    .ce(1'b1),
    .dout(grp_fu_251_p1)
);

kalman_filter_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul3_reg_882),
    .ce(1'b1),
    .dout(grp_fu_254_p1)
);

(* dissolve_hierarchy = "yes" *) kalman_filter_sparsemux_7_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_7_2_64_1_1_U10(
    .din0(dc_1_fu_473_p2),
    .din1(dc_reg_887),
    .din2(dc_1_fu_473_p6),
    .def(dc_1_fu_473_p7),
    .sel(dc_1_fu_473_p8),
    .dout(dc_1_fu_473_p9)
);

(* dissolve_hierarchy = "yes" *) kalman_filter_sparsemux_7_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 64 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
sparsemux_7_2_64_1_1_U11(
    .din0(dc_4_fu_565_p2),
    .din1(dc_3_reg_893),
    .din2(dc_4_fu_565_p6),
    .def(dc_4_fu_565_p7),
    .sel(dc_4_fu_565_p8),
    .dout(dc_4_fu_565_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        P_k_prev_read_reg_857 <= P_k_prev;
        Q_read_reg_867 <= Q;
        R_read_reg_862 <= R;
        x_hat_prev_read_reg_852 <= x_hat_prev;
        z_k_read_reg_872 <= z_k;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv3_reg_877 <= grp_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        data_4_reg_899 <= data_4_fu_302_p1;
        data_5_reg_930 <= data_5_fu_351_p1;
        icmp_ln167_1_reg_935 <= icmp_ln167_1_fu_364_p2;
        icmp_ln167_reg_904 <= icmp_ln167_fu_315_p2;
        icmp_ln170_1_reg_946 <= icmp_ln170_1_fu_378_p2;
        icmp_ln170_reg_915 <= icmp_ln170_fu_329_p2;
        tmp_7_reg_941 <= data_5_fu_351_p1[32'd63];
        tmp_reg_910 <= data_4_fu_302_p1[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        dc_1_reg_981 <= dc_1_fu_473_p9;
        dc_4_reg_986 <= dc_4_fu_565_p9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        dc_3_reg_893 <= grp_fu_254_p1;
        dc_reg_887 <= grp_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        mask_1_reg_971 <= mask_table_q0;
        mask_reg_961 <= mask_table_q1;
        one_half_1_reg_976 <= one_half_table_q0;
        one_half_reg_966 <= one_half_table_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        mul3_reg_882 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_257 <= grp_fu_245_p1;
        reg_262 <= grp_fu_248_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_267 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_274 <= grp_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_280 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state49))) begin
        reg_288 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state58))) begin
        reg_295 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_1_reg_1001 <= {{lshr_ln18_fu_667_p2[84:53]}};
        tmp_2_reg_1006 <= {{shl_ln18_fu_673_p2[84:53]}};
        tmp_3_reg_1021 <= {{lshr_ln18_1_fu_782_p2[84:53]}};
        tmp_4_reg_1026 <= {{shl_ln18_1_fu_788_p2[84:53]}};
        tmp_6_reg_996 <= add_ln486_fu_627_p2[32'd11];
        tmp_9_reg_1016 <= add_ln486_1_fu_742_p2[32'd11];
        xs_sign_1_reg_1011 <= data_3_fu_699_p1[32'd63];
        xs_sign_reg_991 <= data_fu_584_p1[32'd63];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        P_k_ap_vld = 1'b1;
    end else begin
        P_k_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45))) begin
        grp_fu_220_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_220_opcode = 2'd0;
    end else begin
        grp_fu_220_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_220_p0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_220_p0 = reg_267;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_220_p0 = reg_280;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_220_p0 = reg_274;
    end else begin
        grp_fu_220_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_220_p1 = reg_295;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_220_p1 = reg_274;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_220_p1 = reg_267;
    end else begin
        grp_fu_220_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_225_p0 = reg_280;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_225_p0 = reg_288;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_225_p0 = reg_267;
    end else begin
        grp_fu_225_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_225_p1 = 32'd1176256512;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_225_p1 = reg_280;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_225_p1 = reg_288;
    end else begin
        grp_fu_225_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_235_p0 = reg_280;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_235_p0 = conv3_reg_877;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_235_p0 = reg_257;
    end else begin
        grp_fu_235_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_235_p1 = reg_288;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_235_p1 = 32'd1176256512;
    end else begin
        grp_fu_235_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_245_p0 = z_k_read_reg_872;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_245_p0 = R_read_reg_862;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_245_p0 = Q_read_reg_867;
    end else begin
        grp_fu_245_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_248_p0 = x_hat_prev_read_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_248_p0 = P_k_prev_read_reg_857;
    end else begin
        grp_fu_248_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mask_table_ce0_local = 1'b1;
    end else begin
        mask_table_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mask_table_ce1_local = 1'b1;
    end else begin
        mask_table_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        one_half_table_ce0_local = 1'b1;
    end else begin
        one_half_table_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        one_half_table_ce1_local = 1'b1;
    end else begin
        one_half_table_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        x_hat_ap_vld = 1'b1;
    end else begin
        x_hat_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_k = ((xs_sign_1_reg_1011[0:0] == 1'b1) ? result_4_fu_838_p2 : val_1_fu_833_p3);

assign add_ln182_1_fu_506_p2 = (zext_ln175_1_fu_503_p1 + data_5_reg_930);

assign add_ln182_fu_414_p2 = (zext_ln175_fu_411_p1 + data_4_reg_899);

assign add_ln486_1_fu_742_p2 = ($signed(zext_ln486_1_fu_738_p1) + $signed(12'd3073));

assign add_ln486_fu_627_p2 = ($signed(zext_ln486_fu_623_p1) + $signed(12'd3073));

assign and_ln170_1_fu_553_p2 = (xor_ln167_1_fu_548_p2 & icmp_ln170_1_reg_946);

assign and_ln170_fu_461_p2 = (xor_ln167_fu_456_p2 & icmp_ln170_reg_915);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_3_fu_699_p1 = dc_4_reg_986;

assign data_4_fu_302_p1 = dc_reg_887;

assign data_5_fu_351_p1 = dc_3_reg_893;

assign data_fu_584_p1 = dc_1_reg_981;

assign dc_1_fu_473_p2 = t_fu_400_p3;

assign dc_1_fu_473_p6 = t_5_fu_444_p3;

assign dc_1_fu_473_p7 = 'bx;

assign dc_1_fu_473_p8 = {{icmp_ln167_reg_904}, {and_ln170_fu_461_p2}};

assign dc_4_fu_565_p2 = t_6_fu_492_p3;

assign dc_4_fu_565_p6 = t_7_fu_536_p3;

assign dc_4_fu_565_p7 = 'bx;

assign dc_4_fu_565_p8 = {{icmp_ln167_1_reg_935}, {and_ln170_1_fu_553_p2}};

assign icmp_ln167_1_fu_364_p2 = ((xs_exp_2_fu_354_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_315_p2 = ((xs_exp_fu_305_p4 < 11'd1022) ? 1'b1 : 1'b0);

assign icmp_ln170_1_fu_378_p2 = ((xs_exp_2_fu_354_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_329_p2 = ((xs_exp_fu_305_p4 > 11'd1075) ? 1'b1 : 1'b0);

assign index_1_fu_384_p4 = {{data_5_fu_351_p1[57:52]}};

assign index_fu_335_p4 = {{data_4_fu_302_p1[57:52]}};

assign lshr_ln18_1_fu_782_p2 = zext_ln15_1_fu_734_p1 >> zext_ln18_1_fu_778_p1;

assign lshr_ln18_fu_667_p2 = zext_ln15_fu_619_p1 >> zext_ln18_fu_663_p1;

assign mantissa_1_fu_724_p4 = {{{{1'd1}, {trunc_ln505_1_fu_720_p1}}}, {1'd0}};

assign mantissa_fu_609_p4 = {{{{1'd1}, {trunc_ln505_fu_605_p1}}}, {1'd0}};

assign mask_table_address0 = zext_ln179_1_fu_394_p1;

assign mask_table_address1 = zext_ln179_fu_345_p1;

assign one_half_table_address0 = zext_ln179_1_fu_394_p1;

assign one_half_table_address1 = zext_ln179_fu_345_p1;

assign result_1_fu_819_p2 = (32'd0 - val_fu_814_p3);

assign result_4_fu_838_p2 = (32'd0 - val_1_fu_833_p3);

assign select_ln18_2_fu_766_p3 = ((tmp_9_fu_748_p3[0:0] == 1'b1) ? sext_ln18_2_fu_762_p1 : add_ln486_1_fu_742_p2);

assign select_ln18_fu_651_p3 = ((tmp_6_fu_633_p3[0:0] == 1'b1) ? sext_ln18_fu_647_p1 : add_ln486_fu_627_p2);

assign sext_ln18_1_fu_659_p1 = $signed(select_ln18_fu_651_p3);

assign sext_ln18_2_fu_762_p1 = $signed(sub_ln18_1_fu_756_p2);

assign sext_ln18_3_fu_774_p1 = $signed(select_ln18_2_fu_766_p3);

assign sext_ln18_fu_647_p1 = $signed(sub_ln18_fu_641_p2);

assign shl_ln18_1_fu_788_p2 = zext_ln15_1_fu_734_p1 << zext_ln18_1_fu_778_p1;

assign shl_ln18_fu_673_p2 = zext_ln15_fu_619_p1 << zext_ln18_fu_663_p1;

assign sub_ln18_1_fu_756_p2 = (11'd1023 - xs_exp_3_fu_710_p4);

assign sub_ln18_fu_641_p2 = (11'd1023 - xs_exp_1_fu_595_p4);

assign t_5_fu_444_p3 = {{tmp_1_i_fu_434_p4}, {xs_sig_fu_428_p2}};

assign t_6_fu_492_p3 = {{tmp_7_reg_941}, {63'd0}};

assign t_7_fu_536_p3 = {{tmp_1_i1_fu_526_p4}, {xs_sig_1_fu_520_p2}};

assign t_fu_400_p3 = {{tmp_reg_910}, {63'd0}};

assign tmp_1_i1_fu_526_p4 = {{add_ln182_1_fu_506_p2[63:52]}};

assign tmp_1_i_fu_434_p4 = {{add_ln182_fu_414_p2[63:52]}};

assign tmp_6_fu_633_p3 = add_ln486_fu_627_p2[32'd11];

assign tmp_9_fu_748_p3 = add_ln486_1_fu_742_p2[32'd11];

assign trunc_ln467_1_fu_511_p1 = add_ln182_1_fu_506_p2[51:0];

assign trunc_ln467_fu_419_p1 = add_ln182_fu_414_p2[51:0];

assign trunc_ln505_1_fu_720_p1 = data_3_fu_699_p1[51:0];

assign trunc_ln505_fu_605_p1 = data_fu_584_p1[51:0];

assign val_1_fu_833_p3 = ((tmp_9_reg_1016[0:0] == 1'b1) ? tmp_3_reg_1021 : tmp_4_reg_1026);

assign val_fu_814_p3 = ((tmp_6_reg_996[0:0] == 1'b1) ? tmp_1_reg_1001 : tmp_2_reg_1006);

assign x_hat = ((xs_sign_reg_991[0:0] == 1'b1) ? result_1_fu_819_p2 : val_fu_814_p3);

assign xor_ln167_1_fu_548_p2 = (icmp_ln167_1_reg_935 ^ 1'd1);

assign xor_ln167_fu_456_p2 = (icmp_ln167_reg_904 ^ 1'd1);

assign xor_ln184_1_fu_515_p2 = (mask_1_reg_971 ^ 52'd4503599627370495);

assign xor_ln184_fu_423_p2 = (mask_reg_961 ^ 52'd4503599627370495);

assign xs_exp_1_fu_595_p4 = {{data_fu_584_p1[62:52]}};

assign xs_exp_2_fu_354_p4 = {{data_5_fu_351_p1[62:52]}};

assign xs_exp_3_fu_710_p4 = {{data_3_fu_699_p1[62:52]}};

assign xs_exp_fu_305_p4 = {{data_4_fu_302_p1[62:52]}};

assign xs_sig_1_fu_520_p2 = (xor_ln184_1_fu_515_p2 & trunc_ln467_1_fu_511_p1);

assign xs_sig_fu_428_p2 = (xor_ln184_fu_423_p2 & trunc_ln467_fu_419_p1);

assign zext_ln15_1_fu_734_p1 = mantissa_1_fu_724_p4;

assign zext_ln15_fu_619_p1 = mantissa_fu_609_p4;

assign zext_ln175_1_fu_503_p1 = one_half_1_reg_976;

assign zext_ln175_fu_411_p1 = one_half_reg_966;

assign zext_ln179_1_fu_394_p1 = index_1_fu_384_p4;

assign zext_ln179_fu_345_p1 = index_fu_335_p4;

assign zext_ln18_1_fu_778_p1 = $unsigned(sext_ln18_3_fu_774_p1);

assign zext_ln18_fu_663_p1 = $unsigned(sext_ln18_1_fu_659_p1);

assign zext_ln486_1_fu_738_p1 = xs_exp_3_fu_710_p4;

assign zext_ln486_fu_623_p1 = xs_exp_1_fu_595_p4;

endmodule //kalman_filter
